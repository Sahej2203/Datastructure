Heap 

The very first condition is heap must be a complete binary tree.There must be not any gap.
Mostly it is represented as an array.
Height of complete binary tree is always logn.
It is not useful for searching purpose. 

Every node should have the element greater than or equal to its descendants.
If this condition is satisfied then it is called as Max Heap.
 
Every node should have the element smaller than or equal to its descendants.
If this condition is satisfied then it is called as Min Heap.

Inserting in max heap

  30 , 20 , 15 , 5 , 10 , 12 , 6 , 40
  1    2    3    4    5    6   7   8
                                   i

  30 , 20 , 15 , 40 , 10 , 12 , 6 , 5
                 i

  30 , 40 , 15 , 20 , 10 , 12 , 6 , 5 
        i

  40 , 30 , 15 , 20 , 10 , 12 , 6 , 5 
   i

                40
          30           15
       20     10   12      6
     5    

Heap can be created inplace when it is happening inside same array we call it inplace.

   10 |, 20 , 30 , 25 , 5 , 40, 35

   20 , 10 |, 30 , 25 , 5 , 40, 35      20>10

   30 , 10 , 20 |, 25 , 5 , 40, 35      30>20

   30 , 25 , 20 , 10 |, 5 , 40, 35      25>10

   30 , 25 , 20 , 10 , 5 |, 40, 35      5<20

   40 , 25 , 30 , 10 , 5 , 20 |, 35     40>20  40>30

   40 , 25 , 35 , 10 , 5 , 20 , 30|     35>30  35<40

From heap we can delete only root.
   40 , 35 , 30 , 15 , 10 , 25 , 5

    5 , 35 , 30 , 15 , 10 , 25    =>  35 , 5 , 30 , 15 , 10 , 25    => 35 , 15 , 30 , 5 , 10 , 25
    1   2    3     4    5    6      
        left right                         _   _                             _        ______    

Heap Sort - From the heap we go on deleting the element.
1.Create heap of n elements. Time - nlogn
2.Go on deleting n elements one by one. Time - nlognn
Total Time o(nlogn) 

#include <stdio.h>

void Insert(int H[],int n)
{
    int temp,i=n;
    temp=H[i];
    while(i>1 && temp>H[i/2]) //max heap
    {
        H[i]=H[i/2];
        i=i/2;
    }
    H[i]=temp;
}

int Delete(int A[],int n)
{
    int i,j,x,temp,val;
    val=A[1];//deleted value
    x=A[n]; //last element
    A[1]=A[n]; //copy last at first
    
    A[n]=val;//first at last space
    i=1;j=i*2;
    
    while(j<n-1)
    {
        if(A[j+1]>A[j])
        j=j+1;
        if(A[i]<A[j])
        {
            temp=A[i];
            A[i]=A[j];
            A[j]=temp;
            i=j;//child
            j=2*j;//left child
        }
        else 
        break;
    }
    return val;
}

int main()
{
    int H[]={0,10,20,30,25,5,40,35};
    //40,25,35,10,5,20,30
    for(int i=2;i<=7;i++)
    Insert(H,i);
    
    for(int i=7;i>1;i--)
    Delete(H,i);

    for(int i=1;i<=7;i++)
    printf("%d ",H[i]);
    printf("\n");
   
    return 0;
}

Heapify - Creation of heap
In this procedure the direction of ajustment is different.
Faster procedure (do not take leaf node)

#include <iostream>

using namespace std;
 
void swap(int A[], int i, int j){
    int temp = A[i];
    A[i] = A[j];
    A[j] = temp;
}
 
int Delete(int A[], int n){
    int x = A[0];  // Max element
    A[0] = A[n-1];
 
    int i = 0;
    int j = 2 * i + 1;
 
    while (j < n-1){
        // Compare left and right children
        if (A[j] < A[j+1]){
            j = j+1;
        }
 
        // Compare parent and largest child
        if (A[i] < A[j]){
            swap(A, i, j);
            i = j;
            j = 2 * i + 1;
        } else {
            break;
        }
    }
    return x;
}
 
void Heapify(int A[], int n){
    // # of leaf elements: (n+1)/2, index of last leaf element's parent = (n/2)-1
    for (int i=(n/2)-1; i>=0; i--){
 
        int j = 2 * i + 1;  // Left child for current i
 
        while(j < n-1){
            // Compare left and right children of current i
            if (A[j] < A[j+1]){
                j = j+1;
            }
 
            // Compare parent and largest child
            if (A[i] < A[j]){
                swap(A, i, j);
                i = j;
                j = 2 * i + 1;
            } else {
                break;
            }
        }
    }
}
 
template <class T>
void Print(T& vec, int n, string s){
    cout << s << ": [" << flush;
    for (int i=0; i<n; i++){
        cout << vec[i] << flush;
        if (i < n-1){
            cout << ", " << flush;
        }
    }
    cout << "]" << endl;
}
 
int main() {
 
    int A[] = {5, 10, 30, 20, 35, 40, 15};
    Print(A, sizeof(A)/sizeof(A[0]), "A");
 
    Heapify(A, sizeof(A)/sizeof(A[0]));
    Print(A, sizeof(A)/sizeof(A[0]), "Heapified A");
    cout << endl;
 
    int B[] = {5, 10, 30, 20};
    Print(B, sizeof(B)/sizeof(B[0]), "B");
 
    Heapify(B, sizeof(B)/sizeof(B[0]));
    Print(B, sizeof(B)/sizeof(B[0]), "Heapified B");
 
    return 0;
}