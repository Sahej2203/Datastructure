ASCII Codes- standard codes
A - 65  a - 97  0 - 48
B - 66  b - 98  1 - 49
C - 67  c - 99  2 - 50

Z - 90 z - 122  9 - 57

Total 0 - 127,take 1 byte

Unicode - for all language, take 2 bytes, represented in form of hexadecimal.

#include <stdio.h>
 
int main()
{
    char Str[]="Welcome";
 
   /*printf("Enter the String: ");
    scanf("%s", Str);*/
    int i;
    for (i=0;Str[i]!='\0';i++);
    printf("Length of Str is %d",i);
 
    return 0;
}

#include <stdio.h>

int main() 
{
   char s[]="welcome";
   int i;
  
   for (i = 0; s[i]!='\0'; i++) 
    {
        s[i] = s[i] -32;
    }
   printf("String in Upper Case = %s", s);
   return 0;
}

#include <stdio.h>

int main() 
{
   char s[]="WelComE";
   int i;
  
   for (i = 0; s[i]!='\0'; i++) 
    {
        if(s[i]>=65 && s[i]<=90)
            s[i] = s[i] +32;
        else if(s[i]>='a' && s[i]<=122)
            s[i]=s[i]-32;
    }
   printf("%s", s);
   return 0;
}

#include <stdio.h>

int main() 
{
   char s[]="How are you";
   int i,vcount=0,ccount=0,word=1;//word (spaces) remove white spaces previous spaces
  
   for (i = 0; s[i]!='\0'; i++) 
    {
        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || 
        s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U')
            vcount++;
        else if((s[i]>=65 && s[i]<=90) || (s[i]>=97 && s[i]<=122))
        ccount++;
        else if(s[i]==' ' && s[i-1]!=' ')
        word++;
    }
   printf("Vowels: %d\nConsonants: %d\nWords: %d", vcount,ccount,word);
   return 0;
}

#include <stdio.h>

int validate(char *name)
{
   for(int i=0;name[i]!='\0';i++)
   {
       if(!(name[i]>=65 && name[i]<=90) 
       && !(name[i]>=97 && name[i]<=122) 
       && !(name[i]>=48 && name[i]<=57)) 
       return 0;
   }
   return 1;
}

int main() 
{
   char *name="Ani?321";
   if(validate(name))
    printf("valid string");
   else
   printf("Invalid string");
   return 0;
}

#include <stdio.h>

int main() 
{
   char A[]="python";
   char B[7];
   
   int i,j;
   for(i=0;A[i]!='\0';i++)
   {}
   i=i-1;
   for(j=0;i>=0;i--,j++)
   {
       B[j]=A[i];
   }
   B[j]='\0';
   
   printf("%s",B);
   return 0;
}

#include <stdio.h>

int main() 
{
   char A[]="python";
   char t;
   int i,j;
   
   for(j=0;A[j]!='\0';j++)
   {}
   j=j-1;
   for(i=0;i<j;i++,j--)
   {
       t=A[i];
       A[i]=A[j];
       A[j]=t;
   }
   
   printf("%s",A);
   return 0;
}

#include <stdio.h>
 
int main()
{
    char A[]="Painter";
    char B[]="Painting";
 
    int i,j;
    for (i=0,j=0;A[i]!='\0' && B[j]!='\0';i++,j++)
    {
        if(A[i]!=B[j])
        break;
    }
    if(A[i]==B[j])
    printf("Equal");
    else if(A[i]<B[j])
    printf("smaller");
    else 
    printf("greater");
 
    return 0;
}

#include <stdio.h>
 
int main()
{
    char A[]="finding";

    int H[26]={0},i;
    for(i=0;A[i]!='\0';i++)
    {
        H[A[i]-97]++;
    }
    for(i=0;i<26;i++)
    {
        if(H[i]>1)
        {
            printf("%c ",i+97);
            printf("%d times\n",H[i]);
        }
    }
 
    return 0;
}

Bitwise Operations
1.Left Shift 
2.Bitwise OR Merging
3.Bitwise AND Masking
                                                            a & b
a = 10 = 1010                                               1   1 = 1
b = 9 =  0110                                               1   0 = 0
a&b      0010 = 2                                           0   1 = 0
                                                            0   0 = 0
                                                 
                                                            a | b
a = 10 = 1010                                               1   1 = 1
b = 9 =  0110                                               1   0 = 1
a|b      1110 = 14                                          0   1 = 1
                                                            0   0 = 0

Masking = Knowing a particular bit in a memory whether on and off is called masking.

Merging - Setting the bit on in a memory is called merging.

#include <stdio.h>

void Find_Duplicates(char *A)
{
    long int H;//variable to set each character's bit
    int x=0,i;

    for(i=0;A[i]!='\0';i++)
    {//loop through the given string
        x = 1;//Start from least significant bit
        x = x << (A[i] - 97);//leftshift by this no. of times
        if((x & H)>0)
        {//perform bitwise AND (if set before - duplicate)
            printf("%c is a duplicate", A[i]);
            printf("\n");
        }
        else
        {
            H = H | x;//perform bitwise OR (if not set before - set now)
        }
    }
}

int main(){
    char A[] = "finding";//our given string

    Find_Duplicates(A);
}

#include <stdio.h>

int check_anagram(char A[], char B[])
{
int first[26] = {0}, second[26] = {0}, i;

// Calculating frequency of characters of first string

for(i=0;A[i]!='\0';i++)
{
    first[A[i]-97]++;
}

for(i=0;B[i]!='\0';i++)
{
    second[B[i]-97]++;
}

// Comparing frequency of characters
for (i = 0; i < 26; i++)
{
if (first[i] != second[i])
return 0;
}
return 1;
}

int main()
{
char A[100], B[100];

printf("Enter two strings : \n");
scanf("%s",A);
scanf("%s",B);

if (check_anagram(A, B) == 1)
printf("The strings are anagrams\n");
else
printf("The strings are not anagrams\n");
return 0;
}

#include <stdio.h>
#include <string.h>

void permute(char *a, int k)
{
static int A[10]={0};
static char Res[10];
int i;
if (a[k]=='\0')
{
    Res[k]='\0';
    printf("%s\n",Res);
}
else
{
	for (i = 0; a[i]!='\0'; i++)
	{
	    if(A[i]==0)
	    {
	        Res[k]=a[i];
	        A[i]=1;
	        permute(a,k+1);
	        A[i]=0;
	    }
	}
}
}

int main()
{
	char str[] = "ABC";
	int n = strlen(str);
	permute(str, 0);
	return 0;
}

#include <stdio.h>
#include <string.h>

void swap(char *x, char *y)
{
	char temp;
	temp = *x;
	*x = *y;
	*y = temp;
}

void permute (char *a, int l, int h) 
{
  int i;
  if (l == h)
    printf ("%s\n", a);
  else
{
     for (i = l; i <= h; i++)
	{
	  swap ((a + l), (a + i));
	  permute (a, l + 1, h);
	  swap ((a + l), (a + i));	//backtrack
	}  
}
}
 
int main () 
{
char str[] = "ABC";
int n = strlen (str);
  
permute (str, 0, n - 1);
  
return 0;
}


 


