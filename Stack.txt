Stack is a datastructure which works on the discipline Last In First Out.
Recursion use system stack.

ADT stack
Data
1.Space for storing element
2.Top pointer

Operation takes 0(1) time
1.push(x)       
2.pop()
3.peek(index)
4.stackTop()
5.isFull()
6.isEmpty() 

Stack is implemented using physical datastructure array and linkedlist.
We need array,size,top.

#include<stdio.h>
#include<stdlib.h>
struct Stack
{
    int size;
    int top;
    int *S;
};

void Create(struct Stack *st)
{
     printf("Enter size of stack ");
     scanf("%d", &st->size);
     st->S=(int *)malloc(st->size*sizeof(int));
     st->top=-1;
}

void Display(struct Stack st)
{
    for(int i=st.top;i>=0;i--)
    printf("%d ",st.S[i]);
    printf("\n");
}

void push(struct Stack *st,int x)
{
    if(st->top==st->size-1)
    printf("stack overflow\n");
    else
    {
        st->top++;
        st->S[st->top]=x;
    }
}

int pop(struct Stack *st)
{
    int x=-1;
     if(st->top==-1)
     printf("stack underflow\n");
     else
     {
         x=st->S[st->top];
         st->top--;
     }
     return x;
}

int peek(struct Stack st,int pos)
{
     int x=-1;
     if(st.top-pos+1 < 0)
     printf("Invalid index\n");
     else
     x=st.S[st.top-pos+1];
     return x;
}

int stackTop(struct Stack st)
{
     if(st.top==-1)
     return -1;
     else 
     return st.S[st.top];
}

int isEmpty(struct Stack st)
{
     if(st.top==-1)
     return 1;
     else
     return 0;
}

int isFull(struct Stack st)
{
     if(st.top=st.size-1)
     return 1;
     else
     return 0;
}

int main()
{
    struct Stack st;
    Create(&st);
    
    push(&st,10);
    push(&st,20);
    push(&st,30);
    push(&st,40);
    push(&st,50);
    //push(&st,60);
    
    printf("%d\n",pop(&st));
    printf("%d\n",peek(st,2));
    Display(st);
}

#include <stdio.h>
#include <stdlib.h>
struct Node
{
    int data;
    struct Node *next;
}*top=NULL;

void Display()
{
    struct Node *p=top;
    while(p)
    {
        printf("%d ",p->data);
        p=p->next;
    }
}

void push(int x)
{
    struct Node *t=(struct Node*)malloc(sizeof(struct Node));
    if(t==NULL)
    printf("stack overflow\n");
    else
    {
        t->data=x;
        t->next=top;
        top=t;
    }
}

int pop()
{
    struct Node *p=top;
    int x=-1;
    if(top==NULL)
    printf("Stack underflow\n");
    else
    {
        top=top->next;
        x=p->data;
        free(p);
    }
    return x;
}

int peek(int pos)
{
    struct Node *p=top;
    for(int i=0;p && i<pos-1;i++)
    p=p->next;

    if(p)
    return p->data;
    else
    return -1;
}

int stackTop()
{
    if(top)
    return top->data;
    else
    return -1;
}

int isEmpty()
{
    if(top)
    return 0;
    else return 1;
}

int isFull()
{
    struct Node *t=(struct Node *)malloc(sizeof(struct Node));
    if(t==NULL) return 1;
    else return 0;
    free(t);
}

int main()
{
    push(10);
    push(20);
    push(30);
    push(40);
    push(50);
    Display();
    printf("\n");
    printf("%d\n",pop());
    printf("%d\n",peek(2));
    printf("%d\n",stackTop());
    printf("%d",isEmpty());
    return 0;
}

#include <iostream>
using namespace std;

class Node
{
    public:
    int data;
    Node *next;
};

class Stack 
{
    private:
    Node *top;
    public:
    Stack(){top=NULL;}
    void push(int x);
    int pop();
    void Display();
};

void Stack::push(int x)
{
    Node *t=new Node;
    if(t==NULL)
    cout<<"Stack is Full\n";
    else
    {
        t->data=x;
        t->next=top;
        top=t;
    }
}

int Stack::pop()
{
    Node *p=top;
    int x=-1;
    if(top==NULL)
    cout<<"Stack is empty";
    else
    {
        top=top->next;
        x=p->data;
        delete p;
    }
    return x;
}

void Stack::Display()
{
    Node *p=top;
    while(p)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
    cout<<endl;
}

int main()
{
    Stack stk;
    
    stk.push(10);
    stk.push(20);
    stk.push(30);
    stk.Display();
    cout<<stk.pop();
    return 0;
}

#include <stdio.h>
#include <stdlib.h>

struct Node
{
    char data;
    struct Node *next;
}*top=NULL;

void Display()
{
    struct Node *p=top;
    while(p)
    {
        printf("%d ",p->data);
        p=p->next;
    }
}

void push(char x)
{
    struct Node *t=(struct Node*)malloc(sizeof(struct Node));
    if(t==NULL)
    printf("stack overflow\n");
    else
    {
        t->data=x;
        t->next=top;
        top=t;
    }
}

char pop()
{
    struct Node *p=top;
    char x=-1;
    if(top==NULL)
    printf("Stack underflow\n");
    else
    {
        top=top->next;
        x=p->data;
        free(p);
    }
    return x;
}

int isBalanced(char *exp)
{
    for(int i=0;exp[i]!='\0';i++)
    {
        if(exp[i]=='(')
        push(exp[i]);
        else if(exp[i]==')')
        {
            if(top==NULL)
            return 0;
            pop();
        }
    }
    if(top==NULL)
    return 1;
    else 
    return 0;
}

int main()
{
    char *exp="((a+b)*(c-d)))";
    printf("%d ",isBalanced(exp));
    return 0;
}
#include <iostream>
#include <cstring>
#include <stack>
#include <map>

using namespace std;
 
int isBalanced(char *exp)
{
    // Create map
    map<char, char> mapping;
    mapping['}'] = '{';
    mapping[')'] = '(';
    mapping[']'] = '[';
 
    // Create map iterator
    map<char, char>::iterator itr;
 
    // Create stack
    stack<char> stk;
    for (int i=0; i<strlen(exp); i++)
    {
        if (exp[i] == '{' || exp[i] == '[' || exp[i] == '(')
            stk.push(exp[i]);
        else if (exp[i] == '}' || exp[i] == ']' || exp[i] == ')')
        {
            if (stk.empty())
                return false;
            else 
            {
                char temp = stk.top();
                
                itr = mapping.find(exp[i]);
                if (temp == itr->second) // itr->first is key, itr->second is value
                    stk.pop();
                else
                    return false;
            }
        }
    }
    if(stk.empty()) 
    return true;
    else
    return false;
}
 
int main() 
{
    char A[] = "{([a+b]*[c-d])/e}";
    cout << isBalanced(A) << endl;
 
    char B[] = "{([a+b]}*[c-d])/e}";
    cout << isBalanced(B) << endl;
 
    char C[] = "{([{a+b]*[c-d])/e}";
    cout << isBalanced(C) << endl;
 
    return 0;
}

Infix a+b Prefix +ab  Postfix ab+
Infix      8+3 *(9-6) /2^2 + 6/2          //
Postfix    8 3 9 6 - 2^2 / * + 6 2/+      //single scan

+,- 1
*,/ 2
()  3
_________________________________________________________________________
         a+b*c
infix   (a+(b*c))  //fully parenthesis
prefix  (a+[*bc])
         +a*bc
postfix (a+[bc*])
         abc*+
_________________________________________________________________________
                  infix   a+b+c*d
prefix  (a+b+[*cd]) //same precedence left to right
        [+ab]+[*cd]
        ++ab*cd

postfix a+b+[cd*]
        [ab+]+[cd*]
        ab+cd*+
_______________________________________________________________________
                         infix (a+b)*(c-d)
prefix [+ab]*(c-d)
       [+ab]*[-cd]
       *+ab-cd

postfix [ab+]*(c-d)
        [ab+]*[cd-]
         ab+cd-*
_______________________________________________________________________
     precedence   associtivity 
+,-    1             l-r
*,/    2             l-r
^      3             r-l
-      4             r-l
()     5             l-r

            a+b+c-d                               a=b=c=5
l-r       (((a+b)+c)-d)                  r-l   (a=(b=(c=5)))
postfix      ab+c+d-                  postfix      abc5===

         a^b^c   //caps
r-l     (a^(b^c))
postfix  a^[bc^]
         abc^^

infix   -a + b * log n!
postfix -a + b * log[n!]
        -a + b * [n!log]
        [a-]+ b * [n!log]
        [a-] + [bn!log*]
          a-bn!log*+

Infix to Postfix method
a+b*c-d/e

symbol  stack  postfix
a              a
+       +      a
b       +      ab
*       *,+    ab
c       *,+    abc
-       -      abc*+
d       -      abc*+d
/       /,*    abc*+d
e       /,*    abc*+de
_______________________
_              abc*+de/*

Infix to Postfix Method II  Operand has highest precedence
a+b*c-d/e

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node
{
    char data;
    struct Node *next;
}*top=NULL;

void push(char x)
{
    struct Node *t;
    t=(struct Node*)malloc(sizeof(struct Node));

    if(t==NULL)
    printf("stack is full\n");
    else
    {
        t->data=x;
        t->next=top;
        top=t;
    }
}

char pop()
{
    struct Node *t;
    char x=-1;

    if(top==NULL)
    printf("Stack is Empty\n");
    else
    {
        t=top;
        top=top->next;
        x=t->data;
        free(t);
 }
    return x;
}

int pre(char x)
{
    if(x=='+' || x=='-')
    return 1;
    else if(x=='*' || x=='/')
    return 2;
    return 0;
}

int isOperand(char x)
{
    if(x=='+' || x=='-' || x=='*' || x=='/')
    return 0;
    else
    return 1;
}

char * InToPost(char *infix)
{
    int i=0,j=0;
    char *postfix;
    int len=strlen(infix);
    postfix=(char *)malloc((len+2)*sizeof(char));

    while(infix[i]!='\0')
    {
        if(isOperand(infix[i]))
        postfix[j++]=infix[i++];
        else
        {
            if(pre(infix[i])>pre(top->data))
            push(infix[i++]);
            else
            postfix[j++]=pop();
        }
    }
    while(top!=NULL)
    postfix[j++]=pop();
    postfix[j]='\0';
    return postfix;
}

int main()
{
    char *infix="a+b*c-d/e";
    push('#');

    char *postfix=InToPost(infix);

    printf("%s ",postfix);

    return 0;
}

#include <iostream>
#include <cstring>
#include <stack>

using namespace std;
 
int isOperand(char x)
{
    if (x == '+' || x == '-' || x == '*' || x == '/' || x == '^' || x == '(' || x == ')')
        return 0;
    else 
    return 1;
}
 
int outPrecedence(char x){
    if (x == '+' || x == '-')
        return 1;
    else if (x == '*' || x == '/')
        return 3;
    else if (x == '^')
        return 6;
    else if (x == '(')
        return 7;
    else if (x == ')')
        return 0;
    else
    return -1;
}
 
int inPrecedence(char x)
{
    if (x == '+' || x == '-')
        return 2;
    else if (x == '*' || x == '/')
        return 4;
    else if (x == '^')
        return 5;
    else if (x == '(')
        return 0;
    else
    return -1;
}
 
char* convert(char* infix)
{
    char* postfix = new char [strlen(infix) + 1];
    stack<char> stk;
 
    int i = 0,j = 0;
    while (infix[i] != '\0')
    {
        if (isOperand(infix[i]))
            postfix[j++] = infix[i++];
        else 
        {
            if (stk.empty() || outPrecedence(infix[i]) > inPrecedence(stk.top()))
                stk.push(infix[i++]);
            else if (outPrecedence(infix[i]) == inPrecedence(stk.top()))
                stk.pop();
            else 
            {
                postfix[j++] = stk.top();
                stk.pop();
            }
        }
    }
    while (! stk.empty() && stk.top() != ')')
    {
        postfix[j++] = stk.top();
        stk.pop();
    }
    postfix[j] = '\0';
    return postfix;
}
 
int main() 
{
    char infix[] = "((a+b)*c)-d^e^f";
 
    cout << convert(infix) << endl;
}
______________________________________________________________________________

           3*5+6/2-4
postfix    35*62/+4-

Evaluation of postfix
Symbol   stack   operation
3         3
5         5,3
*         15      3*5=15 
6         6,15
2         2,6,15  
/         3,15    6/2=3   
+         18      15+3=18
4         4,18    
-         14      18-4=14

         x=((6+5)+(3*4))
postfix    x65+34*+=
      
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node
{
    int data;
    struct Node *next;
}*top=NULL;

void push(int x)
{
    struct Node *t;
    t=(struct Node*)malloc(sizeof(struct Node));

    if(t==NULL)
    printf("stack is full\n");
    else
    {
        t->data=x;
        t->next=top;
        top=t;
    }
}

int pop()
{
    struct Node *t;
    int x=-1;

    if(top==NULL)
    printf("Stack is Empty\n");
    else
    {
        t=top;
        top=top->next;
        x=t->data;
        free(t);
 }
    return x;
}

int pre(char x)
{
    if(x=='+' || x=='-')
    return 1;
    else if(x=='*' || x=='/')
    return 2;
    return 0;
}

int isOperand(char x)
{
    if(x=='+' || x=='-' || x=='*' || x=='/')
    return 0;
    else
    return 1;
}

int eval(char *postfix)
{
    int i=0,x1,x2,r;
    
    for(i=0;i<postfix[i]!='\0';i++)
    {
        if(isOperand(postfix[i]))
            push(postfix[i]-'0');
        else
        {
            x2=pop();x1=pop();
            switch(postfix[i])
            {
                case '+':r=x1+x2; break;
                case '-':r=x1-x2; break;
                case '*':r=x1*x2; break;
                case '/':r=x1/x2; break;
            }
            push(r);
        }
    }
    return top->data;
}

int main()
{
    char *postfix="234*+82/-";
    printf("%d",eval(postfix));    
    return 0;
}    