A function calling itself is called recursion. Recursion uses stack.
Time complexity of recursion - o(n)
Recurence relation - T(n) = T(n-1) + 1
                     T(n) = T(n-2) + 1 + 1
                     T(n) = T(n-k) + k
              assume n - k = 0 => n = k
                     T(n) = 1 + n 

#include <stdio.h>
int fun(int n)
{
    if(n>0)
    {
        printf("%d ",n); //3 2 1 calling
        fun(n-1);
    }
}

int main()
{
    fun(3);
    return 0;
}

#include <stdio.h>
int fun(int n)
{
    if(n>0)
    {
        fun(n-1);
        printf("%d ",n); //1 2 3 returning 
    }
}

int main()
{
    fun(3);
    return 0;
}

#include <stdio.h>
int x = 0;//global variables
int fun(int n)
{
    //static int x = 0; //static variables have single copy
    if(n>0)
    {
        x++;
        return fun(n-1) + x;
    }
    return 0;
}

int main()
{
    printf("%d\n",fun(5));
    printf("%d",fun(5));
    return 0;
}

Types of Recursion
Tail Recursion - The last statement is calling statement.
Head Recursion - The first statement is the recursive call.  
Tree Recursion - The function calling itself more than one time

#include<stdio.h>
int fun(int n)
{
    if(n>0)
    {
        printf("%d ",n); //3 2 1 1 2 1 1
        fun(n-1);
        fun(n-1);
    }
}

int main()
{
    fun(3);
    return 0;
}

Indirect Recursion - Function depend upon one another
#include<stdio.h>

void funB(int n);
void funA(int n)
{
    if(n>0)
    {
        printf("%d ",n); //20 19 9 8 4 3 1 
        funB(n-1);
    }
}

void funB(int n)
{
    if(n>1)
    {
        printf("%d ",n);
        funA(n/2);
    }
}
int main()
{
    funA(20);
    return 0;
}

Nested Recursion - Recursion inside recursion

#include<stdio.h>

int fun(int n)
{
    if(n>100)
        return n-10;
    return fun(fun(n+11));
}

int main()
{
    printf("%d\n",fun(95)); //91
    return 0;
}

#include<stdio.h>

int RSum(int n)
{
    if(n>0)
    {
        return RSum(n-1)+n;
    }
    return 0;
}

int ISum(int n)
{
    int s=0;
    for(int i=1;i<=n;i++)
        s=s+i;
        
    return s;
}

int main()
{
    printf("%d\n",ISum(5));
    return 0;
}

#include <stdio.h>
int fact(int n)
{
    if(n==0)
    return 1;
    else
    return fact(n-1)*n;
}

int Ifact(int n)
{
    int f=1;
    for(int i=1;i<=n;i++)
    f=f*i;
    
    return f;
}

int main()
{
    printf("%d ",Ifact(5));
    return 0;
}

#include <stdio.h>

int Pow(int m,int n)
{
    if(n==0)
    return 1;
    else
    return Pow(m,n-1)*m; //pow(2,3) -> pow(2,2)*2 -> pow(2,1)*2 -> pow(2,0)*2 = 1*2
}

int Pow2(int m,int n)
{
    if(n==0)
    return 1;
    else if(n%2==0)
    return Pow2(m*m,n/2);//2^8=(2X2)^4 
    else 
    return m*Pow2(m*m,(n-1)/2);//2^9=2X(2X2)^(9-1)/2
}

int main()
{
    printf("%d ",Pow2(2,9));
    return 0;
}

#include <stdio.h>
double e(int x,int n)
{
    static double p=1,f=1; //p=x^0 f=0!
    double r;
    if(n==0)
    return 1;
    else
    {
        r=e(x,n-1);
        p=p*x;
        f=f*n;
        return r+p/f;
    }
}

int main()
{
    printf("%lf",e(3,10));//Taylor Series
    return 0;
}

#include <stdio.h>

double e(int x,int n)
{
    static double s=1;
    if(n==0)
    return s;
    else 
    {
        s=1+x*s/n;//1+x/4*s => 1+x/3*(1+x/4*1) => ...
        return e(x,n-1); 
    }
}

int main()
{
    printf("%lf",e(1,10));//Taylor Series using Horner's rule
    return 0;
}

#include <stdio.h>

double e(int x,int n)
{
    double s=1,num=1,den=1;
    for(int i=1;i<=n;i++)
    {
        num=num*x;
        den=den*i;
        s=s+num/den;
    }
    return s;
}

int main()
{
    printf("%lf",e(1,10));//Taylor Series using Iteration
    return 0;
}

#include <stdio.h> // 0 1 1 2 3 5 8 13
                   // 0 1 2 3 4 5 6 7
int Fib(int n)
{
    if(n<=1)
    return n;
    else 
    return Fib(n-2)+Fib(n-1);  //o(2^n)
}

int main()
{
    printf("%d",Fib(6));
    return 0;
}

#include <stdio.h>

int fib(int n)
{
    int t0=0,t1=1,s;
    if(n<=1)
    return n;
    for(int i=2;i<=n;i++)  //o(n)
    {
        s=t0+t1;
        t0=t1;
        t1=s;
    }
    return s;
}

int main()
{
    printf("%d ",fib(6));
    return 0;
}

#include <stdio.h>//Memoization - Storing the result to avoid excessive calls - o(n)

int F[10];
int fib(int n)
{
    if(n<=1)
    {
        F[n]=n;
        return n;
    }
    else 
    {
        if(F[n-2]==-1)
            F[n-2]=fib(n-2);
        if(F[n-1]==-1)
            F[n-1]=fib(n-1);
    return F[n-2]+F[n-1];
    }
}

int main()
{
    for(int i=0;i<10;i++)
        F[i]=-1;
    printf("%d ",fib(5));
    return 0;
}

#include <stdio.h>// nCr = n!/r!(n-r)!

int fact(int n)
{
    if(n<=1)
        return 1;
    else
        return fact(n-1)*n;
}

int C(int n,int r)
{
    int t1=fact(n);
    int t2=fact(r);
    int t3=fact(n-r);
    return t1/(t2*t3);
}

int main()
{
    printf("%d ",C(5,1));
    return 0;
}

#include <stdio.h>// Pascal Traingle nCr = n!/r!(n-r)!

int C(int n,int r)
{
    if(r==0 || n==r)
        return 1;
    else 
        return C(n-1,r-1) + C(n-1,r);
}

int main()
{
    printf("%d ",C(4,2));
    return 0;
}

#include <stdio.h>// Tower of Hanoi

void TOH(int n,int A,int B,int C)
{            //FROM   USING   TO
    if(n>0)
    {
        TOH(n-1,A,C,B);
        printf("from %d to %d\n",A,C);
        TOH(n-1,B,A,C);
    }
}

int main()
{
    TOH(3,1,2,3);
    return 0;
}

